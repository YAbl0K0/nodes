#!/bin/bash

# –§–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –≥–∞–º–∞–Ω—Ü—ñ–≤ (—Ñ–æ—Ä–º–∞—Ç: –∞–¥—Ä–µ—Å–∞, –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á)
WALLETS_FILE="wallets.csv"

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ñ –∞–¥—Ä–µ—Å–∏
CONTRACT_ADDRESS="0x2b790dea1f6c5d72d5c60af0f9cd6834374a964b"

# RPC –≤—É–∑–æ–ª Arbitrum
RPC_URL="https://arb-mainnet.g.alchemy.com/v2/CZp2sOzdTa1SZukXkVGpP0kpsyhJL5nL"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ethers.js, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
if ! command -v node &> /dev/null || ! npm list -g ethers &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —Ç–∞ ethers.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt install -y nodejs
    npm install -g ethers
fi

# –¶–∏–∫–ª –ø–æ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—è—Ö —É —Ñ–∞–π–ª—ñ
while IFS="," read -r ADDRESS PRIVATE_KEY
  do
    echo "–û–±—Ä–æ–±–∫–∞ –≥–∞–º–∞–Ω—Ü—è: $ADDRESS"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è CLAIM
node -e 'const ethers = require("ethers");
const provider = new ethers.JsonRpcProvider("'$RPC_URL'");
const wallet = new ethers.Wallet("'$PRIVATE_KEY'", provider);

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É checksum-–∞–¥—Ä–µ—Å—É
const contractAddress = ethers.getAddress("0xa91fF8b606bA57D8c6638Dd8CF3fC7eB15a9c634");

const contractABI = [
    "function multicall(bytes[] calldata data) external",
    "function NodeClaim(address node, address claimer, uint256 rewards) external"
];

const contract = new ethers.Contract(contractAddress, contractABI, wallet);

async function executeMulticall() {
    try {
        const nodeAddress = ethers.getAddress("0x5990c2a11aF316987d2d99FE8B813D7c1F0bA0D0");
        const claimerAddress = ethers.getAddress("0x5990c2a11aF316987d2d99FE8B813D7c1F0bA0D0");
        const rewards = ethers.parseUnits("690.810218900826266814", 18);

        const claimData = contract.interface.encodeFunctionData("NodeClaim", [nodeAddress, claimerAddress, rewards]);

        // –í–∏–∫–æ–Ω—É—î–º–æ multicall
        const tx = await contract.multicall([claimData], { gasLimit: 800000 });
        console.log("Multicall TX:", tx.hash);

        // –ß–µ–∫–∞—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        await tx.wait();
        console.log("‚úÖ Multicall –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");

    } catch (error) {
        if (error.data) {
            console.error("üõë Raw Revert Data:", error.data);
        }
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ Multicall:", error);
    }
}

executeMulticall();'



    sleep 10  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è REDEEM
    #node -e 'const ethers = require("ethers");
#const provider = new ethers.JsonRpcProvider("'$RPC_URL'");
#const wallet = new ethers.Wallet("'$PRIVATE_KEY'", provider);
#const contractAddress = "'$CONTRACT_ADDRESS'";
#const contractABI = ["function withdraw(uint256 amount, uint256 duration) external"];
#const contract = new ethers.Contract(contractAddress, contractABI, wallet);

#async function redeem() {
    #try {
        #const amount = ethers.parseUnits("1", 18); // –ú—ñ–Ω—ñ–º—É–º 1 veCARV
        #const duration = 1296000; // 15 –¥–Ω—ñ–≤ —É —Å–µ–∫—É–Ω–¥–∞—Ö

        #console.log("–í–∏–∫–æ–Ω—É—î–º–æ withdraw:", { amount: amount.toString(), duration });

        #const tx = await contract.withdraw(amount, duration);
        #console.log("Withdraw TX:", tx.hash);
       # await tx.wait();
     #   console.log("‚úÖ Withdraw –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!");
 #   } catch (error) {
#     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:", error);
#    }
#}

#redeem();'
    
   # sleep 10  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –≥–∞–º–∞–Ω—Ü–µ–º
  
done < "$WALLETS_FILE"

echo "–ì–æ—Ç–æ–≤–æ!"
