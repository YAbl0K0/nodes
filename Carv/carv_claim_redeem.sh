#!/bin/bash

# –§–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –≥–∞–º–∞–Ω—Ü—ñ–≤ (—Ñ–æ—Ä–º–∞—Ç: –∞–¥—Ä–µ—Å–∞, –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á)
WALLETS_FILE="wallets.csv"

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ñ –∞–¥—Ä–µ—Å–∏
CONTRACT_ADDRESS="0xa91fF8b606BA57D8c6638Dd8CF3FC7eB15a9c634"

# RPC –≤—É–∑–æ–ª Arbitrum
RPC_URL="https://arb-mainnet.g.alchemy.com/v2/CZp2sOzdTa1SZukXkVGpP0kpsyhJL5nL"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ethers.js, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
if ! command -v node &> /dev/null || ! npm list -g ethers &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —Ç–∞ ethers.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt install -y nodejs
    npm install -g ethers
fi

# –¶–∏–∫–ª –ø–æ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—è—Ö —É —Ñ–∞–π–ª—ñ
while IFS="," read -r ADDRESS PRIVATE_KEY
do
    echo "–û–±—Ä–æ–±–∫–∞ –≥–∞–º–∞–Ω—Ü—è: $ADDRESS"

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è CLAIM
    node -e '
const ethers = require("ethers");
const provider = new ethers.JsonRpcProvider("'$RPC_URL'");
const wallet = new ethers.Wallet("'$PRIVATE_KEY'", provider);

const contractAddress = "'$CONTRACT_ADDRESS'";
const contractABI = [
    "function multicall(bytes[] calldata data) external",
    "function nodeClaim(address node, uint256 rewards) external",
    "function tokenRewards(address node) view returns (uint256)"
];

const contract = new ethers.Contract(contractAddress, contractABI, wallet);

async function simulateMulticall() {
    try {
        const nodeAddress = "'$ADDRESS'";
        const rewards = await contract.tokenRewards(nodeAddress);
        
        if (rewards === 0n) {
            console.log(`‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥ –¥–ª—è ${nodeAddress}`);
            return;
        }

        const claimData = contract.interface.encodeFunctionData("nodeClaim", [nodeAddress, rewards]);

        // –°–∏–º—É–ª—è—Ü—ñ—è multicall
        await contract.callStatic.multicall([claimData]);
        console.log("‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞");

    } catch (error) {
        console.error("‚ùå –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–∫–∞–∑–∞–ª–∞, —â–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞:");
        if (error.data) {
            console.error("üõë Raw Revert Data:", error.data);
        } else {
            console.error(error);
        }
    }
}

simulateMulticall();'


    sleep 10  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∞ –ø—ñ–¥–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è REDEEM
    node -e '
const ethers = require("ethers");
const provider = new ethers.JsonRpcProvider("'$RPC_URL'");
const wallet = new ethers.Wallet("'$PRIVATE_KEY'", provider);

const contractAddress = "0x2b790Dea1f6c5d72D5C60aF0F9CD6834374a964B";

const contractABI = [
    "function withdraw(uint256 amount, uint256 duration) external",
    "function balanceOf(address account) view returns (uint256)"
];

const contract = new ethers.Contract(contractAddress, contractABI, wallet);

async function simulateWithdraw() {
    try {
        const balance = await contract.balanceOf(wallet.address);
        console.log("–ë–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ withdraw:", ethers.formatUnits(balance, 18));

        if (balance === 0n) {
            console.log("‚ùå –ë–∞–ª–∞–Ω—Å 0, –Ω–µ–º–∞—î —â–æ –≤–∏–≤–æ–¥–∏—Ç–∏");
            return;
        }

        const amount = ethers.parseUnits("1", 18); // –í–∏–≤–æ–¥–∏–º–æ 1 veCARV
        const duration = 1296000; // 15 –¥–Ω—ñ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        // –°–∏–º—É–ª—è—Ü—ñ—è withdraw
        await contract.callStatic.withdraw(amount, duration);
        console.log("‚úÖ –°–∏–º—É–ª—è—Ü—ñ—è withdraw —É—Å–ø—ñ—à–Ω–∞");

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó withdraw:");
        if (error.data) {
            console.error("üõë Raw Revert Data:", error.data);
        } else {
            console.error(error);
        }
    }
}

simulateWithdraw();'

  
done < "$WALLETS_FILE"

echo "–ì–æ—Ç–æ–≤–æ!"
