#!/bin/bash

# –§–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –≥–∞–º–∞–Ω—Ü—ñ–≤ (—Ñ–æ—Ä–º–∞—Ç: –∞–¥—Ä–µ—Å–∞, –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–ª—é—á)
WALLETS_FILE="wallets.csv"

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ñ –∞–¥—Ä–µ—Å–∏
CONTRACT_ADDRESS="0xa91fF8b606BA57D8c6638Dd8CF3FC7eB15a9c634"

# RPC –≤—É–∑–æ–ª Arbitrum
RPC_URL="https://arb-mainnet.g.alchemy.com/v2/CZp2sOzdTa1SZukXkVGpP0kpsyhJL5nL"

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è ethers.js, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
if ! command -v node &> /dev/null || ! npm list -g ethers &> /dev/null; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js —Ç–∞ ethers.js..."
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
    apt install -y nodejs
    npm install -g ethers
fi

# –¶–∏–∫–ª –ø–æ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—è—Ö —É —Ñ–∞–π–ª—ñ
while IFS="," read -r ADDRESS PRIVATE_KEY
do
    echo "–û–±—Ä–æ–±–∫–∞ –≥–∞–º–∞–Ω—Ü—è: $ADDRESS"

    node -e '
    const ethers = require("ethers");
    const provider = new ethers.JsonRpcProvider("'$RPC_URL'");
    const wallet = new ethers.Wallet("'$PRIVATE_KEY'", provider);

    const contractAddress = "'$CONTRACT_ADDRESS'";
    const contractABI = [
        "function multicall(bytes[] calldata data) external",
        "function nodeClaim(address node, uint256 rewards) external",
        "function tokenRewards(address node) view returns (uint256)"
    ];

    const contract = new ethers.Contract(contractAddress, contractABI, wallet);

    async function executeMulticall() {
        try {
            const nodeAddress = "'$ADDRESS'";
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–æ—Ä–æ–¥
            const rewards = await contract.callStatic.tokenRewards(nodeAddress);
            console.log(`–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ –¥–ª—è ${nodeAddress}:`, ethers.formatUnits(rewards, 18));

            if (rewards === 0n) {
                console.log(`‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥ –¥–ª—è ${nodeAddress}`);
                return;
            }

            // –ö–æ–¥—É–≤–∞–Ω–Ω—è nodeClaim
            const claimData = contract.interface.encodeFunctionData("nodeClaim", [nodeAddress, rewards]);

            // –í–∏–∫–ª–∏–∫ multicall –∑ nodeClaim
            const tx = await contract.multicall([claimData], { gasLimit: 800000 });
            console.log("Multicall TX:", tx.hash);

            await tx.wait();
            console.log("‚úÖ Multicall –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");

        } catch (error) {
            if (error.data) {
                console.error("üõë Raw Revert Data:", error.data);
            }
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ Multicall:", error);
        }
    }

    executeMulticall();'

    sleep 10  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—î—é

done < "$WALLETS_FILE"

echo "–ì–æ—Ç–æ–≤–æ!"
