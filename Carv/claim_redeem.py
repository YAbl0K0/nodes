import csv
import json
from web3 import Web3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC Arbitrum
w3 = Web3(Web3.HTTPProvider("https://arbitrum-mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if not w3.isConnected():
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC")
else:
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC —É—Å–ø–µ—à–Ω–æ")

# –ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
CONTRACT = "0xa91fF8b606BA57D8c6638Dd8CF3FC7eB15a9c634"

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ ABI —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
manual_abi = [
    {
        "inputs": [
            {"internalType": "bytes[]", "name": "data", "type": "bytes[]"}
        ],
        "name": "multicall",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ ABI —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
]

# –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Å –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞–Ω–Ω—ã–º ABI
def access_Contract(contract):
    return w3.eth.contract(address=contract, abi=manual_abi)

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ multicall –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
def multicall_for_wallet(wallet_address, private_key):
    print(f"üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
    contract = access_Contract(CONTRACT)

    method_data = [
        "0xf39a19bf0000000000000000000000005990c2a11af316987d2d99fe8b813d7c1f0ba0d0"
    ]

    nonce = w3.eth.getTransactionCount(wallet_address)
    print(f"üî¢ Nonce: {nonce}")

    txn = contract.functions.multicall(method_data).build_transaction({
        'from': wallet_address,
        'gas': 600000,
        'gasPrice': w3.toWei('0.01041', 'gwei'),
        'nonce': nonce,
    })

    signed_txn = w3.eth.account.sign_transaction(txn, private_key)
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞")

    tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {wallet_address}. Hash: {tx_hash.hex()}")

    receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {wallet_address}: {receipt}")

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ multicall –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
def process_wallets():
    try:
        with open('wallets.csv', 'r') as file:
            print("‚úÖ –§–∞–π–ª wallets.csv —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")
            reader = csv.DictReader(file)
            for row in reader:
                address = row['address'].strip()
                private_key = row['private_key'].strip()

                if not private_key.startswith("0x"):
                    private_key = "0x" + private_key

                if len(private_key) != 66:
                    print(f"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è {address} –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É ({len(private_key)}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

                try:
                    multicall_for_wallet(address, private_key)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {address}: {e}")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª wallets.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
process_wallets()
