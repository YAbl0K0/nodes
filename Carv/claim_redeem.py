import json
import time
import schedule
from web3 import Web3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC —Å–µ—Ç–∏ Arbitrum One
RPC_URL = "https://worldchain-mainnet.g.alchemy.com/v2/uxH9ix8Ifu27RJO332Yii9nqVqGqUTRa"
web3 = Web3(Web3.HTTPProvider(RPC_URL))

# –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
MULTICALL_ADDRESS = "0x911F8bB66aD57b8c6C80D5D3FC7eB15a9c634"  # –ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –∫–ª–µ–π–º–∞
WITHDRAW_CONTRACT_ADDRESS = "0x2b790Dea1f6c5d72D5C60aF0F9CD6834374a964B"  # –ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞

# –§–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
ACCOUNTS_FILE = "accounts.json"

# –§—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
CLAIM_FUNCTION_SIG = web3.keccak(text="claim()")[:4].hex()
WITHDRAW_FUNCTION_SIG = web3.keccak(text="withdraw(uint256,uint256)")[:4].hex()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
def load_accounts():
    with open(ACCOUNTS_FILE, "r") as file:
        return json.load(file)

# –ü–æ–ª—É—á–µ–Ω–∏–µ nonce —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º
def get_safe_nonce(address):
    return web3.eth.get_transaction_count(address, "pending")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def send_transaction(private_key, to, data, value=0):
    account = web3.eth.account.from_key(private_key)
    nonce = get_safe_nonce(account.address)

    tx = {
        "to": to,
        "value": value,
        "gas": 300000,
        "gasPrice": web3.to_wei("5", "gwei"),
        "nonce": nonce,
        "data": data,
        "chainId": web3.eth.chain_id
    }

    signed_tx = web3.eth.account.sign_transaction(tx, private_key)
    tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
    
    print(f"‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {web3.to_hex(tx_hash)}")
    return web3.to_hex(tx_hash)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def wait_for_transaction(tx_hash, timeout=60):
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}...")
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        receipt = web3.eth.get_transaction_receipt(tx_hash)
        if receipt and receipt.status == 1:
            print(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            return True
        time.sleep(5)
    
    print(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥.")
    return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤
def get_balance(wallet_address, contract_address):
    token_contract = web3.eth.contract(address=contract_address, abi=[{
        "constant": True,
        "inputs": [{"name": "_owner", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "balance", "type": "uint256"}],
        "type": "function"
    }])

    return token_contract.functions.balanceOf(wallet_address).call()

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def wait_for_balance_update(wallet_address, contract_address, old_balance, timeout=60):
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {wallet_address}...")
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        new_balance = get_balance(wallet_address, contract_address)
        if new_balance > old_balance:
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_balance}")
            return new_balance
        time.sleep(5)
    
    print(f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥.")
    return old_balance

# –ö–ª–µ–π–º —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ multicall
def claim_tokens(private_key):
    print("‚è≥ –ö–ª–µ–π–º —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ multicall...")
    
    claim_data = CLAIM_FUNCTION_SIG
    multicall_data = "0xac9650d8" + claim_data[2:].zfill(64)

    tx_hash = send_transaction(private_key, MULTICALL_ADDRESS, multicall_data)
    return tx_hash

# –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ (withdraw –≤–º–µ—Å—Ç–æ redeem)
def withdraw_tokens(private_key, wallet_address):
    print(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –¥–ª—è {wallet_address}...")
    
    balance = get_balance(wallet_address, WITHDRAW_CONTRACT_ADDRESS)
    if balance > 0:
        duration = 0  # –ü—Ä–æ–≤–µ—Ä—å, –µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è `withdraw(uint256,uint256)`
        balance_hex = web3.to_hex(balance)[2:].zfill(64)
        duration_hex = web3.to_hex(duration)[2:].zfill(64)
        withdraw_data = WITHDRAW_FUNCTION_SIG + balance_hex + duration_hex
        
        tx_hash = send_transaction(private_key, WITHDRAW_CONTRACT_ADDRESS, withdraw_data)
        return tx_hash
    else:
        print("‚ùå –ë–∞–ª–∞–Ω—Å = 0, –≤—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
def process_accounts():
    accounts = load_accounts()
    
    for acc in accounts:
        private_key = acc["private_key"]
        wallet_address = acc["wallet_address"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∫–ª–µ–π–º–æ–º
        initial_balance = get_balance(wallet_address, WITHDRAW_CONTRACT_ADDRESS)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–æ –∫–ª–µ–π–º–∞: {initial_balance}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–µ–π–º —Ç–æ–∫–µ–Ω–æ–≤
        claim_tx = claim_tokens(private_key)
        if not wait_for_transaction(claim_tx):
            print("‚ùå –ö–ª–µ–π–º –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç.")
            continue

        # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        new_balance = wait_for_balance_update(wallet_address, WITHDRAW_CONTRACT_ADDRESS, initial_balance)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∫–ª–µ–π–º–∞: {new_balance}")

        # –í—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ (withdraw)
        if new_balance > initial_balance:
            withdraw_tx = withdraw_tokens(private_key, wallet_address)
            wait_for_transaction(withdraw_tx)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        with open("transactions.log", "a") as log:
            log.write(f"{wallet_address} | Claim: {claim_tx} | Withdraw: {withdraw_tx}\n")

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00
schedule.every().day.at("09:00").do(process_accounts)

print("‚è≥ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥–µ—Ç 09:00...")
while True:
    schedule.run_pending()
    time.sleep(30)
