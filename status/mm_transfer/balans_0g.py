#!/usr/bin/env python3
import json
import time
from web3 import Web3

# –°–ø–∏—Å–æ–∫ RPC –¥–ª—è —Å–µ—Ç–∏ OG (–ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É)
OG_RPCS = [
    "https://16601.rpc.thirdweb.com",      # –ø—É–±–ª–∏—á–Ω—ã–π (–º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–ª—é—á)
    "https://evmrpc-testnet.0g.ai",        # –ø—É–±–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    # –î–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π RPC, –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä QuickNode / Ankr / Alchemy)
    # "https://your-rpc.example"
]

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ERC-20 ABI (balanceOf, decimals, symbol)
ERC20_ABI = json.loads("""[
    {"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"type":"function"},
    {"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"type":"function"},
    {"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"type":"function"}
]""")

# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ OG (–∏–ª–∏ –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—ã–º)
TOKEN_CONTRACTS = {
    "OG": [
        # "0xTokenAddress1",
        # "0xTokenAddress2"
    ]
}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–¥—Ä–µ—Å–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
WALLET_FILE = "wallet.txt"

def pick_working_provider(rpc_list, timeout=5):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ –ø–æ—Ä—è–¥–∫—É RPC –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–π —Ä–∞–±–æ—á–∏–π Web3 –ø—Ä–æ–≤–∞–π–¥–µ—Ä."""
    for rpc in rpc_list:
        try:
            w3 = Web3(Web3.HTTPProvider(rpc, request_kwargs={"timeout": timeout}))
            if w3.is_connected():
                # –ø—Ä–æ–≤–µ—Ä–∏–º chainId (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                try:
                    cid = w3.eth.chain_id
                except Exception:
                    cid = None
                return w3, rpc, cid
        except Exception:
            continue
    return None, None, None

def to_checksum(addr):
    try:
        return Web3.toChecksumAddress(addr)
    except Exception:
        return None

def get_native_balance(w3, addr):
    try:
        bal = w3.eth.get_balance(addr)
        # Web3.fromWei is module-level; –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web3.fromWei
        return Web3.fromWei(bal, 'ether')
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return None

def get_token_balance(w3, token_addr, user_addr):
    try:
        token_addr_cs = to_checksum(token_addr)
        if not token_addr_cs:
            return None, None
        contract = w3.eth.contract(address=token_addr_cs, abi=ERC20_ABI)
        raw = contract.functions.balanceOf(user_addr).call()
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å decimals –∏ symbol (–º–æ–≥—É—Ç –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è)
        try:
            decimals = contract.functions.decimals().call()
        except Exception:
            decimals = 18
        try:
            symbol = contract.functions.symbol().call()
        except Exception:
            symbol = "ERC20"
        human = raw / (10 ** decimals) if decimals is not None else raw
        return human, symbol
    except Exception as e:
        # –Ω–µ –ø–∞–¥–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None, None

def load_addresses(path):
    with open(path, "r", encoding="utf-8") as f:
        lines = [l.strip() for l in f if l.strip()]
    return lines

def main():
    print("üîé –ò—â–µ–º —Ä–∞–±–æ—á–∏–π RPC –¥–ª—è OG...")
    w3, rpc_used, chain_id = pick_working_provider(OG_RPCS, timeout=6)
    if not w3:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∏–∑ RPC. –î–æ–±–∞–≤—å —Ä–∞–±–æ—á–∏–π RPC –≤ OG_RPCS.")
        return

    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ RPC: {rpc_used} (chainId={chain_id})\n")

    try:
        addresses = load_addresses(WALLET_FILE)
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {WALLET_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–∞–º–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É).")
        return

    if not addresses:
        print("‚ùå –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç.")
        return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤—ã–≤–æ–¥–∞
    print("–ê–¥—Ä–µ—Å; –ù–∞—Ç–∏–≤–Ω—ã–π (OG); –¢–æ–∫–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    for a in addresses:
        cs = to_checksum(a)
        if not cs:
            print(f"{a}; ERROR_CHECKSUM; -")
            continue

        native = get_native_balance(w3, cs)
        if native is None:
            native_str = "ERR"
        else:
            # native –º–æ–∂–µ—Ç –±—ã—Ç—å Decimal/float; —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
            native_str = f"{float(native):.18f}".rstrip('0').rstrip('.')  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏

        tokens_out = []
        for tok in TOKEN_CONTRACTS.get("OG", []):
            bal, sym = get_token_balance(w3, tok, cs)
            if bal is None:
                continue
            # —Ñ–∏–ª—å—Ç—Ä –Ω—É–ª–µ–π (–ø–æ—Ä–æ–≥ > 0)
            if bal and float(bal) > 0:
                tokens_out.append(f"{bal} {sym}")

        tokens_txt = ", ".join(tokens_out) if tokens_out else "–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤"
        print(f"{cs}; {native_str}; {tokens_txt}")

if __name__ == "__main__":
    main()
