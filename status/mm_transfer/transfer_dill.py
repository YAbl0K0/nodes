import sys
import subprocess
import time
from web3 import Web3
from decimal import Decimal, getcontext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ Dill
RPC_URL = "https://rpc-alps.dill.xyz"
CHAIN_ID = 102125
DEFAULT_GAS_LIMIT = 500000  # –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
getcontext().prec = 30

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Web3
w3 = Web3(Web3.HTTPProvider(RPC_URL))
assert w3.is_connected(), "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ Dill!"

def get_gas_price():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≥–∞–∑–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 2‚Äì10 Gwei"""
    try:
        gas_price = w3.eth.gas_price
        return min(max(gas_price, w3.to_wei(2, 'gwei')), w3.to_wei(10, 'gwei'))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞: {e}")
        return w3.to_wei(5, 'gwei')  # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 5 Gwei

def to_checksum(address):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å –∫ checksum-—Ñ–æ—Ä–º–∞—Ç—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        return Web3.to_checksum_address(address)
    except Exception:
        return None

def get_dill_balance(address):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ DILL"""
    checksum_address = to_checksum(address)
    if not checksum_address:
        return 0.000  # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    
    try:
        balance_wei = w3.eth.get_balance(checksum_address)
        balance_dill = float(w3.from_wei(balance_wei, 'ether'))
        return round(balance_dill, 6)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 6 –∑–Ω–∞–∫–æ–≤
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ {address}: {e}")
        return 0.000

def send_dill(private_key, sender, recipient):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π DILL (–æ—Å—Ç–∞–≤–ª—è—è 0)"""
    eth_balance = Decimal(get_dill_balance(sender))

    print(f"üí∞ –ë–∞–ª–∞–Ω—Å {sender}: {eth_balance} DILL")

    if eth_balance <= 0:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sender}: –±–∞–ª–∞–Ω—Å 0 DILL")
        return  # –ë–∞–ª–∞–Ω—Å 0, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    gas_price = Decimal(get_gas_price())

    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞
    try:
        estimated_gas = Decimal(w3.eth.estimate_gas({
            'from': sender,
            'to': recipient,
            'value': w3.to_wei(float(eth_balance), 'ether')
        }))
    except:
        estimated_gas = Decimal(DEFAULT_GAS_LIMIT)  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å, –±–µ—Ä–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π

    required_eth = Decimal(w3.from_wei(estimated_gas * gas_price, 'ether'))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ Decimal

    print(f"üõ† –¢—Ä–µ–±—É–µ—Ç—Å—è {required_eth} DILL –Ω–∞ –≥–∞–∑ | –ë–∞–ª–∞–Ω—Å {eth_balance} DILL")

    if eth_balance <= required_eth:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DILL –¥–ª—è –≥–∞–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {sender}")
        return  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DILL –¥–ª—è –≥–∞–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    # –ó–∞–ø–∞—Å 1 wei (~0.000000000000000001 DILL) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    safety_buffer = Decimal(w3.from_wei(1, 'wei'))  

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –≤ wei, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    send_amount_wei = w3.to_wei(float(eth_balance - required_eth - safety_buffer), 'ether')
    send_amount = Decimal(w3.from_wei(send_amount_wei, 'ether'))  # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ DILL

    # –ï—Å–ª–∏ send_amount –≤—ã—Ö–æ–¥–∏—Ç 0, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É (1 wei)
    min_transfer = Decimal(w3.from_wei(1, 'wei'))
    send_amount = max(send_amount, min_transfer)

    if send_amount <= 0:
        print(f"‚ö†Ô∏è –ü–æ—Å–ª–µ —É—á–µ—Ç–∞ –≥–∞–∑–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sender}")
        return  # –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –≥–∞–∑–∞

    nonce = w3.eth.get_transaction_count(sender, "pending")

    try:
        tx = {
            'to': recipient,
            'value': w3.to_wei(float(send_amount), 'ether'),
            'gas': int(estimated_gas),
            'gasPrice': int(gas_price),
            'nonce': nonce,
            'chainId': CHAIN_ID
        }
        signed_tx = w3.eth.account.sign_transaction(tx, private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_hash_hex = w3.to_hex(tx_hash)

        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {send_amount} DILL: {tx_hash_hex}")

        with open("tx_hashes.log", "a") as log_file:
            log_file.write(f"{sender} -> {recipient}: {send_amount} DILL | TX: {tx_hash_hex}\n")

        time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å {sender}: {str(e)}")
        with open("errors.log", "a") as error_file:
            error_file.write(f"–û—à–∏–±–∫–∞ —Å {sender}: {str(e)}\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        with open("addresses.txt", "r") as file:
            lines = file.readlines()
        
        if not lines:
            print("‚ö†Ô∏è –§–∞–π–ª addresses.txt –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            return
        
        for line in lines:
            try:
                sender, private_key, recipient = line.strip().split(";")
                
                sender = to_checksum(sender)
                recipient = to_checksum(recipient)
                
                if not sender or not recipient:
                    print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –≤ —Å—Ç—Ä–æ–∫–µ: {line.strip()} –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
                
                send_dill(private_key, sender, recipient)  # –û—Ç–ø—Ä–∞–≤–∫–∞ DILL
                time.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ '{line.strip()}': {e}")
                with open("errors.log", "a") as error_file:
                    error_file.write(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ '{line.strip()}': {e}\n")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª addresses.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞.")

if __name__ == "__main__":
    main()
