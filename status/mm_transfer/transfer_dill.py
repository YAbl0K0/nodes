from web3 import Web3
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ Dill
RPC_URL = "https://rpc.dill.xyz"
CHAIN_ID = 102125  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Chain ID —Å–µ—Ç–∏ Dill
GAS_LIMIT = 500000  # –ë–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –≥–∞–∑–∞
GAS_PRICE = lambda: min(max(w3.eth.gas_price, w3.to_wei(2, 'gwei')), w3.to_wei(10, 'gwei'))  # –û—Ç 2 –¥–æ 10 Gwei

# ERC-20 –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Ç–æ–∫–µ–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ—Ç–∏ Dill)
ERC20_CONTRACT_ADDRESS = "0xYourDillTokenAddressHere"
TOKEN_DECIMALS = 18

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Web3
w3 = Web3(Web3.HTTPProvider(RPC_URL))
assert w3.is_connected(), "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ç–∏ Dill!"

def get_eth_balance(address):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (DILL) –Ω–∞ –∞–¥—Ä–µ—Å–µ"""
    return w3.eth.get_balance(address)

def get_token_balance(address):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞"""
    checksum_address = w3.to_checksum_address(address)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ checksum
    contract = w3.eth.contract(address=ERC20_CONTRACT_ADDRESS, abi=[
        {"constant": True, "inputs": [{"name": "", "type": "address"}], "name": "balanceOf", 
         "outputs": [{"name": "", "type": "uint256"}], "type": "function"}
    ])
    balance = contract.functions.balanceOf(checksum_address).call()
    return balance // (10 ** TOKEN_DECIMALS)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ

def send_tokens(private_key, sender, recipient):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã"""
    token_balance = get_token_balance(sender)
    eth_balance = get_eth_balance(sender)
    eth_balance_ether = w3.from_wei(eth_balance, 'ether')

    if token_balance <= 0:
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É {sender}, —Ç–∞–∫ –∫–∞–∫ –±–∞–ª–∞–Ω—Å 0 —Ç–æ–∫–µ–Ω–æ–≤")
        return
    
    gas_price = GAS_PRICE()
    estimated_gas_cost = GAS_LIMIT * gas_price
    required_eth = w3.from_wei(estimated_gas_cost, 'ether')
    
    if eth_balance < estimated_gas_cost:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ DILL –¥–ª—è –≥–∞–∑–∞! –ë–∞–ª–∞–Ω—Å: {eth_balance_ether} DILL, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_eth} DILL. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {sender}")
        return
    
    contract = w3.eth.contract(address=ERC20_CONTRACT_ADDRESS, abi=[
        {"constant": False, "inputs": [{"name": "_to", "type": "address"}, {"name": "_value", "type": "uint256"}], 
         "name": "transfer", "outputs": [{"name": "", "type": "bool"}], "type": "function"}
    ])
    
    nonce = w3.eth.get_transaction_count(sender)
    token_amount = token_balance * (10 ** TOKEN_DECIMALS)
    
    try:
        estimated_gas = contract.functions.transfer(recipient, token_amount).estimate_gas({'from': sender})
        tx = contract.functions.transfer(recipient, token_amount).build_transaction({
            'from': sender,
            'nonce': nonce,
            'gas': estimated_gas,
            'gasPrice': gas_price,
            'chainId': CHAIN_ID
        })
        signed_tx = w3.eth.account.sign_transaction(tx, private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {token_balance} —Ç–æ–∫–µ–Ω–æ–≤: {w3.to_hex(tx_hash)}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å {sender}: {str(e)}")
        return

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    with open("addresses.txt", "r") as file:
        lines = file.readlines()
    
    for line in lines:
        try:
            sender, private_key, recipient = line.strip().split(";")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤ checksum
            sender = w3.to_checksum_address(sender)
            recipient = w3.to_checksum_address(recipient)
            
            token_balance = get_token_balance(sender)
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å {sender}: {token_balance} —Ç–æ–∫–µ–Ω–æ–≤")
            send_tokens(private_key, sender, recipient)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤
            
            time.sleep(3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –∞–¥—Ä–µ—Å {line.strip()} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}")
            continue

if __name__ == "__main__":
    main()
