import sys
import time
import random
from web3 import Web3
import concurrent.futures
from decimal import Decimal, getcontext

# –¢–æ—á–Ω–æ—Å—Ç—å
getcontext().prec = 30

# RPC Shardeum
RPC_URL = "https://api.shardeum.org"
w3 = Web3(Web3.HTTPProvider(RPC_URL))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
if not w3.is_connected():
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC Shardeum!")
    sys.exit()

CHAIN_ID = 8118  # mainnet Shardeum
GAS_LIMIT = 21000  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤

def get_gas_price():
    try:
        return w3.eth.gas_price
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≥–∞–∑–∞: {e}")
        return w3.to_wei(1, 'gwei')  # fallback

def send_shm(private_key, sender, recipient):
    try:
        balance_wei = w3.eth.get_balance(sender)
        balance = w3.from_wei(balance_wei, 'ether')
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å {sender}: {balance} SHM")

        gas_price = get_gas_price()
        required_wei = gas_price * GAS_LIMIT

        if balance_wei <= required_wei:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SHM –¥–ª—è –æ–ø–ª–∞—Ç—ã –≥–∞–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {sender}")
            return

        send_amount_wei = balance_wei - required_wei
        send_amount = w3.from_wei(send_amount_wei, 'ether')
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {send_amount} SHM ‚Üí {recipient}")

        nonce = w3.eth.get_transaction_count(sender, 'pending')
        tx = {
            'nonce': nonce,
            'to': recipient,
            'value': send_amount_wei,
            'gas': GAS_LIMIT,
            'gasPrice': gas_price,
            'chainId': CHAIN_ID
        }

        signed_tx = w3.eth.account.sign_transaction(tx, private_key)
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_url = f"https://explorer.shardeum.org/transaction/{w3.to_hex(tx_hash)}"

        print(f"‚úÖ TX –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {tx_url}")

        with open("tx_hashes.log", "a") as f:
            f.write(f"{sender} ‚Üí {recipient}: {send_amount} SHM | TX: {tx_url}\n")

        time.sleep(2)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É {sender}: {e}")
        with open("errors.log", "a") as f:
            f.write(f"{sender}: {e}\n")

def main():
    try:
        with open("addresses_shm.txt", "r") as f:
            lines = [line.strip() for line in f if line.strip()]

        def process(line):
            try:
                sender, private_key, recipient = line.split(";")
                sender = w3.to_checksum_address(sender)
                recipient = w3.to_checksum_address(recipient)
                send_shm(private_key, sender, recipient)
                time.sleep(random.uniform(2, 5))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–∏ '{line}': {e}")

        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            executor.map(process, lines)

    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª addresses.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if __name__ == "__main__":
    main()
