from web3 import Web3
from web3.middleware.poa import geth_poa_middleware  # –ù–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è Web3 7.x

# RPC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
RPC_URLS = {
    "mantle": "https://rpc.mantle.xyz",
    "arbitrum": "https://arb1.arbitrum.io/rpc",
    "optimism": "https://mainnet.optimism.io",
    "opbnb": "https://opbnb-mainnet-rpc.bnbchain.org"
}

def connect_to_network(network):
    """ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏ """
    if network not in RPC_URLS:
        print(f"‚ùå –û—à–∏–±–∫–∞: –°–µ—Ç—å '{network}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
        return None

    w3 = Web3(Web3.HTTPProvider(RPC_URLS[network]))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É POA (Arbitrum, BNB Chain, Optimism)
    w3.middleware_onion.inject(geth_poa_middleware, layer=0)

    if w3.is_connected():
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏ {network.capitalize()} (Block: {w3.eth.block_number})")
        return w3
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ {network.capitalize()}!")
        return None

def get_transactions_by_address(w3, address, start_block=0, end_block="latest"):
    """ –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ """
    address = address.lower()
    end_block = w3.eth.block_number if end_block == "latest" else end_block
    transactions = []

    print(f"üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –±–ª–æ–∫–∞ {start_block} –¥–æ {end_block}...")

    for block_number in range(start_block, end_block + 1):
        block = w3.eth.get_block(block_number, full_transactions=True)
        for tx in block.transactions:
            if tx["from"].lower() == address or (tx["to"] and tx["to"].lower() == address):
                transactions.append({
                    "hash": tx.hash.hex(),
                    "from": tx["from"],
                    "to": tx["to"],
                    "value": w3.from_wei(tx["value"], 'ether'),
                    "block": block_number
                })

    return transactions

def get_last_n_transactions(w3, address, n=10):
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π """
    latest_block = w3.eth.block_number
    transactions = []

    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {n} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

    for block_number in range(latest_block, latest_block - 10000, -1):  # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 000 –±–ª–æ–∫–æ–≤
        block = w3.eth.get_block(block_number, full_transactions=True)
        for tx in block.transactions:
            if tx["from"].lower() == address or (tx["to"] and tx["to"].lower() == address):
                transactions.append({
                    "hash": tx.hash.hex(),
                    "from": tx["from"],
                    "to": tx["to"],
                    "value": w3.from_wei(tx["value"], 'ether'),
                    "block": block_number
                })
            if len(transactions) >= n:
                return transactions

    return transactions

def print_transactions(transactions, title):
    """ –í—ã–≤–æ–¥–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ """
    print(f"\nüìå {title}")
    if transactions:
        print("TxHash; –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å; –ü–æ–ª—É—á–∞—Ç–µ–ª—å; –ó–Ω–∞—á–µ–Ω–∏–µ; –ë–ª–æ–∫")
        for tx in transactions:
            print(f"{tx['hash']}; {tx['from']}; {tx['to']}; {tx['value']} ETH/MNT; {tx['block']}")
    else:
        print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å: mantle, arbitrum, optimism, opbnb")
    network = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: ").strip().lower()
    
    w3 = connect_to_network(network)
    
    if w3:
        address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ").strip()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        last_transactions = get_last_n_transactions(w3, address, n=10)
        print_transactions(last_transactions, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        all_transactions = get_transactions_by_address(w3, address, start_block=0)
        print_transactions(all_transactions, "–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
