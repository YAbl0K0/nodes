from web3 import Web3

# RPC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
RPC_URLS = {
    "mantle": "https://rpc.mantle.xyz",
    "arbitrum": "https://arb1.arbitrum.io/rpc",
    "optimism": "https://mainnet.optimism.io",
    "opbnb": "https://opbnb-mainnet-rpc.bnbchain.org",
}

def connect_to_network(network):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ç–∏"""
    if network not in RPC_URLS:
        print(f"‚ùå –°–µ—Ç—å '{network}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!")
        return None

    w3 = Web3(Web3.HTTPProvider(RPC_URLS[network]))

    if w3.is_connected():
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏ {network.capitalize()} (Block: {w3.eth.block_number})")
        return w3
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ {network.capitalize()}!")
        return None

def get_transactions_by_address(w3, address, start_block=0, end_block="latest"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    address = address.lower()
    end_block = w3.eth.block_number if end_block == "latest" else end_block
    transactions = []

    print(f"üîç –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –±–ª–æ–∫–∞ {start_block} –¥–æ {end_block}...")

    for block_number in range(start_block, end_block + 1):
        try:
            block = w3.eth.get_block(block_number, full_transactions=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∞ {block_number}: {e}")
            continue

        for tx in block.transactions:
            if tx["from"].lower() == address or (tx["to"] and tx["to"].lower() == address):
                transactions.append({
                    "hash": tx.hash.hex(),
                    "from": tx["from"],
                    "to": tx["to"],
                    "value": w3.from_wei(tx["value"], 'ether'),
                    "block": block_number
                })

    return transactions

def print_transactions(transactions):
    """–í—ã–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if transactions:
        print("\nüìå –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
        print("TxHash; –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å; –ü–æ–ª—É—á–∞—Ç–µ–ª—å; –ó–Ω–∞—á–µ–Ω–∏–µ; –ë–ª–æ–∫")
        for tx in transactions:
            print(f"{tx['hash']}; {tx['from']}; {tx['to']}; {tx['value']} ETH/MNT; {tx['block']}")
    else:
        print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å: mantle, arbitrum, optimism, opbnb")
    network = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ç–∏: ").strip().lower()

    w3 = connect_to_network(network)

    if w3:
        address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ").strip()
        start_block = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–ª–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0): ") or 0)
        end_block = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –±–ª–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é latest): ").strip()
        end_block = "latest" if not end_block else int(end_block)

        transactions = get_transactions_by_address(w3, address, start_block, end_block)
        print_transactions(transactions)

