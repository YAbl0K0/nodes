from web3 import Web3

# RPC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
RPC_URLS = {
    "mantle": "https://rpc.mantle.xyz",
    "arbitrum": "https://arb1.arbitrum.io/rpc",
    "optimism": "https://mainnet.optimism.io",
    "opbnb": "https://opbnb-mainnet-rpc.bnbchain.org",
}

def connect_to_network():
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:")
    for i, network in enumerate(RPC_URLS.keys(), 1):
        print(f"{i}. {network.capitalize()}")

    choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ç–∏: ").strip()) - 1
    network = list(RPC_URLS.keys())[choice]

    print(f"\n–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏ {network.capitalize()}...")
    w3 = Web3(Web3.HTTPProvider(RPC_URLS[network]))

    if w3.is_connected():
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ç–∏ {network.capitalize()} (Block: {w3.eth.block_number})")
        return w3
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ {network.capitalize()}!")
        return None

def get_last_transactions(w3, address, count=1):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (1 –∏–ª–∏ 10)"""
    latest_block = w3.eth.block_number
    transactions = []

    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")

    for block_number in range(latest_block, latest_block - 1000, -1):  # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –±–ª–æ–∫–æ–≤
        try:
            block = w3.eth.get_block(block_number, full_transactions=True)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –±–ª–æ–∫–∞ {block_number}: {e}")
            continue

        for tx in block.transactions:
            if tx["from"].lower() == address.lower() or (tx["to"] and tx["to"].lower() == address.lower()):
                transactions.append({
                    "hash": tx.hash.hex(),
                    "from": tx["from"],
                    "to": tx["to"],
                    "value": w3.from_wei(tx["value"], 'ether'),
                    "block": block_number,
                })

            if len(transactions) >= count:
                return transactions

    return transactions

def print_transactions(transactions, count):
    """–í—ã–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    if transactions:
        print(f"\nüìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
        print("TxHash; –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å; –ü–æ–ª—É—á–∞—Ç–µ–ª—å; –ó–Ω–∞—á–µ–Ω–∏–µ; –ë–ª–æ–∫")
        for tx in transactions:
            print(f"{tx['hash']}; {tx['from']}; {tx['to']}; {tx['value']} ETH/MNT; {tx['block']}")
    else:
        print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    w3 = connect_to_network()
    if w3:
        address = input("\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ").strip()
        print("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?")
        print("1. –ü–æ—Å–ª–µ–¥–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        print("2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ").strip())

        count = 1 if choice == 1 else 10
        transactions = get_last_transactions(w3, address, count)
        print_transactions(transactions, count)
