import sys
import subprocess

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Web3, —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
try:
    from web3 import Web3
except ImportError:
    print("–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ web3...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "web3"])
    from web3 import Web3

# üîë –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Å–≤—ñ–π Alchemy API KEY
ALCHEMY_KEY = "CZp2sOzdTa1SZukXkVGpP0kpsyhJL5nL"
RPC_URLS = {
    "Arbitrum": f"https://arb-mainnet.g.alchemy.com/v2/{ALCHEMY_KEY}"
}

# –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É —Ç–æ–∫–µ–Ω–∞ SQD
SQD_CONTRACT_ADDRESS = "0x1337420ded5adb9980cfc35f82b2b054ea86f8ab"

# ABI —Ç—ñ–ª—å–∫–∏ –∑ balanceOf (–±–µ–∑ decimals, –±–æ –≤–æ–Ω–æ –Ω–µ –ø—Ä–∞—Ü—é—î)
MIN_ABI = [
    {
        "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
        "stateMutability": "view",
        "type": "function"
    }
]

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
w3 = Web3(Web3.HTTPProvider(RPC_URLS["Arbitrum"]))
assert w3.is_connected(), "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –¥–æ Alchemy Arbitrum RPC!"

def to_checksum(address):
    try:
        return Web3.to_checksum_address(address)
    except:
        print(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –∞–¥—Ä–µ—Å: {address}")
        return None

def get_sqd_balance(address):
    try:
        address = to_checksum(address)
        if not address:
            return 0.0
        contract = w3.eth.contract(address=SQD_CONTRACT_ADDRESS, abi=MIN_ABI)
        raw = contract.functions.balanceOf(address).call()
        return round(raw / (10 ** 18), 3)  # SQD –º–∞—î 18 –¥–µ—Ü–∏–º–∞–ª—ñ–≤
    except Exception as e:
        print(f"[DEBUG] –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {address}: {e}")
        return 0.0

def check_sqd():
    try:
        with open("wallet.txt", "r") as file:
            addresses = [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        print("–§–∞–π–ª wallet.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    print("–ê–¥—Ä–µ—Å;SQD")
    for address in addresses:
        balance = get_sqd_balance(address)
        print(f"{address};{balance}")

if __name__ == "__main__":
    check_sqd()
